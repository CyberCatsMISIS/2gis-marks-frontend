import React, { useEffect, useRef } from 'react'
import { MapGL } from '@2gis/mapgl'
import { Mark } from '@/types'
import { useMapStore } from '@/store/useMapStore'

interface MarkMarkerProps {
  mark: Mark
  map: MapGL
}

export const MarkMarker: React.FC<MarkMarkerProps> = ({ mark, map }) => {
  const markerRef = useRef<any>(null)
  const { setSelectedMark } = useMapStore()

  useEffect(() => {
    if (map) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
      const marker = new (window as any).DG.Marker([mark.coordinates[1], mark.coordinates[0]], {
        icon: createMarkerIcon(mark.tags),
        title: mark.title
      })

      marker.addTo(map)
      markerRef.current = marker

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É
      marker.on('click', () => {
        setSelectedMark(mark)
      })

      return () => {
        if (markerRef.current) {
          markerRef.current.remove()
        }
      }
    }
  }, [map, mark, setSelectedMark])

  return null
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
const createMarkerIcon = (tags: string[]) => {
  const color = getTagColor(tags)
  
  return {
    html: `
      <div class="marker-icon" style="
        width: 30px;
        height: 30px;
        background-color: ${color};
        border: 2px solid white;
        border-radius: 50%;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        color: white;
        font-weight: bold;
      ">
        üìç
      </div>
    `,
    iconSize: [30, 30],
    iconAnchor: [15, 15]
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
const getTagColor = (tags: string[]): string => {
  if (tags.includes('–∫–∞—Ñ–µ') || tags.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω')) return '#FF6B35'
  if (tags.includes('–ø–∞—Ä–∫–æ–≤–∫–∞')) return '#0066CC'
  if (tags.includes('wi-fi') || tags.includes('–∏–Ω—Ç–µ—Ä–Ω–µ—Ç')) return '#28a745'
  if (tags.includes('—Ä–∞–±–æ—Ç–∞') || tags.includes('–æ—Ñ–∏—Å')) return '#6f42c1'
  return '#6c757d'
}
